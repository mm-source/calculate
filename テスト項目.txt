画面テスト項目（このコードに基づく）
大項目	中項目	小項目	テスト手順	評価内容	期待結果
画面	ウィンドウ枠	固定サイズ	①起動 ②ウィンドウの端をドラッグしてリサイズを試みる	FormBorderStyle=FixedSingle / MaximumSize=MinimumSize=Size の反映	サイズが変更できない（固定である）
	ウィンドウ枠	最大化ボタン	①起動 ②最大化ボタンをクリック	MaximizeBox=false の反映	最大化できない（ボタン無効/非活性）
	ウィンドウ枠	最小化	①起動 ②最小化ボタンをクリック	最小化動作	最小化される
画面	タイトル/表示欄	タイトルバー	①起動	タイトル表示	フォームのタイトルが意図どおり（プロジェクト設定値）で表示される
	表示欄（上）	途中計算表示欄 初期表示	①起動	初期テキスト	空文字（何も表示されない）
	表示欄（下）	計算結果表示欄 初期表示	①起動	初期テキスト	「0」
画面	フォント（初期）	結果欄 初期フォントサイズ	①起動	Constants.FontSize.RESULT_DISPLAY_BASE の適用	結果欄フォントが 36f で表示される
	フォント（初期）	途中式欄 初期フォントサイズ	①起動	Constants.FontSize.EXPRESSION_DISPLAY_BASE の適用	途中式欄フォントが 10f で表示される
画面	フォント（自動調整）	長い整数入力で縮小	①幅を超えるまで数字入力 ②入力都度表示確認	AutoFitResultFont の動作	結果欄がはみ出さず自動でフォント縮小される（下限 14f まで）
	フォント（自動調整）	長い小数入力で縮小	①小数点含む長い数値を入力	同上	同上：14f を下回らない
	フォント（自動調整）	削除で拡大	①上記で縮小させる②←で桁を戻す	AutoFitResultFont 逆方向	フォントが自動で拡大し、初期 36f を超えない
	フォント（自動調整）	エラーメッセージ表示時	①1 ÷ 0 =	エラー時フォント	結果欄が 18f でエラーメッセージ表示（折り返し無しで枠内）
画面	TopMost	トグルON表示	①[最前面]ボタン押下	TopMost と色反映	フォームが最前面化し、ボタンの背景色が LightBlue
	TopMost	トグルOFF表示	①再度[最前面]押下	TopMost と色反映	最前面解除、ボタンの背景色が SystemColors.Control
画面	ボタン活性	初期活性	①起動	活性状態	全ボタン押下可能
	ボタン活性	エラー時の無効化	①1 ÷ 0 =	m_disabledButtonsOnError 反映	. / ± / % / + / − / × / ÷ ボタンが無効化
	ボタン活性	エラー復帰	①エラー後に数字を押下	復帰処理	電卓が初期化され、上記ボタンが再び有効化
表示体裁	カンマ区切り	整数入力の3桁区切り	①整数を複数桁入力	InsertCommasIfNeeded / UpdateTextResultWithCommas	整数部に , が入る（編集中も維持）
	カンマ区切り	小数の3桁区切り	①小数を入力（整数部のみ3桁区切り対象）	同上	小数部には , を入れない／整数部のみ区切り
	カンマ区切り	指数表示時の区切り	①1 ÷ 3000 = などで指数表示	同上	指数表示 e± のときはカンマ非適用
表示体裁	指数/固定	大き過ぎ→指数	①1e16 以上になる演算を行う（例：10^16 =）	FormatNumberForDisplay の閾値	結果は指数表示（e+ 桁）
	指数/固定	小さ過ぎ→固定/指数切替	①1e-3 より小さい結果を種々作る	「先行0＋有効桁」<=17 判定	先行ゼロ数＋有効桁が 17 以下なら固定小数、超えたら指数
	指数/固定	通常レンジ	①0.001〜未満/1e16未満を入力/計算	固定小数レンダリング	固定小数（0.################ 形式）で表示
表示体裁	指数体裁	仮数末尾の「.」付与	①指数表示になる値で整数仮数を作る	FormatExponential	仮数が整数のとき、**末尾に「.」**が付く（例：5.）
	指数体裁	指数符号	①正・負の指数を作る	同上	指数部に +/- が付く（例：e-4, e+16）
表示体裁	式欄の書式	同一フォーマッタ適用	①値入力→演算子押下	UpdateExpressionDisplay	途中式欄の数値も結果欄と同じ規則（指数/固定）で表示
	式欄の書式	negate 表記	①=の直後に±押下	UpdateExpressionForToggleSign	式欄が negate(結果) に置換される（更に±で入れ子）
表示体裁	初期化表示	C/CE/＝直後←	①C押下②CE押下③＝直後に←	Reset系/OnBackspaceButton	C：全消去（式空・結果「0」/フォント初期化）。CE：式を維持し結果「0」。＝直後←：式が空になり入力初期化
入力欄	ドット入力	先頭「.」	①起動 ②「.」押下	OnDotButton	結果欄が 0. になり上書きモード解除
	ドット入力	重複ドット	①数値入力後「.」を2回	OnDotButton のガード	2回目以降の「.」は無視される
入力欄	桁上限	整数最大全桁	①整数を連続入力して 16 桁超を試みる	IsInputValid	16桁を超える追加を拒否
	桁上限	0.形式の最大全桁	①0.始まりで小数を 17 桁以上入力	同上	17 桁を超える追加を拒否
	桁上限	先頭ゼロ抑止	①「0」を2回以上入力（小数点未入力）	同上	連続「0」の冗長入力を拒否（1つだけ残る）
画面操作	演算子末尾置換	右辺未入力の演算子置換	①数値→「+」→「×」→「÷」	TryReplaceTrailingOperator	式欄末尾の演算子が最後に押した演算子へ置換
	演算子末尾置換	＝直後の新連鎖	①式を作成して「=」→直後に演算子	StartNewChainAfterEqual	式欄が現在値＋演算子に更新、結果欄はその値で新規開始
エラー表示	DivideByZero	0 除算	①1 ÷ 0 =	SetErrorState	結果欄に 「0で割ることはできません」（フォント 18f）
	エラー表示	Undefined	0÷0	①0 ÷ 0 =	同上
	エラー表示	オーバーフロー	decimal計算でOverflowExceptionを誘発	例：内部で溢れるケースを作成（※通常入力では発生しにくい）	同上
状態復帰	エラーからの数値入力	エラー状態で数字押下	①上記エラー発生後に「7」	HandleInitialState	状態が初期化され、通常入力に戻る（結果「7」/式空）
	状態復帰	エラー時にC	エラー発生後 C	ResetAllState	式欄空・結果「0」・フォント初期化・ボタン再有効化
見た目整合	カレット位置とカンマ	編集中の3桁区切り再描画	①大きな数を入力→途中で数字/Backspace	UpdateTextResultWithCommas	カンマ再描画後もキャレット位置が自然（末尾からの距離維持）
見た目整合	指数→新規入力	指数表示後の数字入力	①指数表示になる計算→直後に数字	OnDigitButton の指数リセット	指数表示の直後に数字を押すと新規入力で「置き換え」
見た目整合	±/％の直後表示	±直後/％直後の式欄と結果欄	①仕様どおりに±/％を押下	各ハンドラ	式欄・結果欄がガイドどおり更新（negate入れ子、％置換、係数連打 等）
備考（コード依拠ポイント）

サイズ固定：FormBorderStyle.FixedSingle、MaximumSize = MinimumSize = Size、MaximizeBox = false

フォント：結果欄 36f、途中式 10f、エラー時 18f、下限 14f（AutoFitResultFont）

指数/固定表示：FormatNumberForDisplay

|x| ≥ 1e16 → 指数

|x| < 1e-3 → 「先行ゼロ数 + 有効桁 ≤ 17」なら固定、超過で指数

それ以外 → 固定

カンマ：指数表示時は非適用、固定表示時は整数部のみ適用

エラー文言：0で割ることはできません / 結果が定義されていません / 計算範囲を超えました

TopMost ボタン色：ON=LightBlue、OFF=SystemColors.Control

-------------------------------------------------------------------------------------------

入力テスト項目（このコードに基づく）
大項目	中項目	小項目	テスト手順	評価内容	期待結果
事前準備	—	—	アプリを起動し、入力を行っていない状態にする	—	結果欄「0」、式欄空、全ボタン活性
入力	マウス入力	数字	任意の数字ボタンを順に押下	数字入力の可否	結果欄に押下順で表示される／整数部は3桁区切り、桁上限(通常16桁、0.形式17桁)を超える入力は無視
	マウス入力	先頭ゼロ	①「0」を押下 ②再度「0」を押下	冗長ゼロ抑止	②は無視され、表示は「0」のまま（小数点未入力時）
	マウス入力	小数点	「.」を押下	ドット入力	結果欄が「0.」になり編集継続；2回目以降の「.」は無視
	マウス入力	Backspace	①複数桁入力 ②「←」押下	桁下げ	末尾1桁が削除される／空または「-」になったら「0」に戻り上書きモード
	マウス入力	Backspace（＝直後）	①式を作成し「=」 ②「←」押下	＝直後の←	式欄が空に、結果は「0」、新規入力状態
	マウス入力	Backspace（指数表示中）	指数表示状態で「←」押下	指数表示からの←	結果欄が「0」にリセット（新規入力）
	マウス入力	C	①任意入力 ②「C」押下	全消去	式欄が空、結果欄「0」、フォント初期値、全ボタン活性
	マウス入力	CE（右辺編集中）	①「12」→「+」→「34」 ②「CE」押下	CE動作	結果欄が「0」に、式欄は「12 +」のまま
	マウス入力	CE（％で置換後）	①「200」→「+」→「10」→「%」 ②「CE」押下	％後のCE	式欄が「200 +」に戻る／結果欄「0」
	マウス入力	CE（negate 単独表示時）	①「100」→「=」→「±」 ②「CE」押下	negate 単独→CE	式欄も結果も「0」に、ロック解除
	マウス入力	±（通常編集中）	①任意値入力中に「±」押下	サイン反転	結果欄の符号がトグル；式欄更新無し
	マウス入力	±（演算子後・右辺未入力）	①「A」→演算子押下（右辺未入力）②「±」	negate 挿入	式欄が「A op negate(A)」に、結果欄は「-A」
	マウス入力	±（＝直後）	①式を計算して「=」②「±」	＝直後のnegate	結果は符号反転して表示／式欄は「negate(結果)」に（さらに±で入れ子表記）
	マウス入力	%（演算子未選択）	①起動直後に「%」	単独％	結果欄「0」、式欄「0」
	マウス入力	%（演算子あり・加減算）	①「A」→「+」→「b」→「%」	％の意味（加減算）	右辺が A×(b/100) に置換され表示；結果欄にもその値
	マウス入力	%（演算子あり・乗除算）	①「A」→「×」→「b」→「%」	％の意味（乗除算）	右辺が b/100 に置換され表示；結果欄にもその値
	マウス入力	%（＝直後 加減算）	①「A + B =」②「%」	連打用係数	結果が A×(A×0.01) になり、以後「%」連打で前回係数で乗算継続
	マウス入力	演算子置換	①「10」→「+」→「×」→「÷」	末尾演算子置換	式欄末尾の演算子が最後に押したものへ置換；結果欄は左辺表示のまま
	マウス入力	演算子変更（右辺未入力）	①「10」→「+」②「-」	右辺未入力の変更	式欄が「10 -」に更新、結果は「10」のまま
	マウス入力	演算子入力（通常）	①「12」→「+」→「34」→「×」	計算→新演算子	「12+34」を確定し結果表示→式欄「(結果) ×」へ
	マウス入力	演算子（＝直後）	①「12+3=」②「×」	新チェーン開始	式欄が「15 ×」、結果欄に15
	マウス入力	=（初回）	①「A」→「op」→「B」→「=」	等号処理	計算結果が表示；式欄「A op B =」
	マウス入力	=（連打）	①上記の続きで再度「=」	等号再実行	直前の右辺Bを再利用し連続計算
	マウス入力	0除算	①「1」→「÷」→「0」→「=」	エラー表示	結果欄に 「0で割ることはできません」、該当ボタン（. ± % + − × ÷）が無効化
	マウス入力	0÷0	①「0」→「÷」→「0」→「=」	未定義エラー	結果欄に 「結果が定義されていません」、同上の無効化
	マウス入力	エラーからの復帰（数字押下）	①上記エラー発生 ②数字ボタン押下	復帰	内部リセット後、通常入力再開
入力	キーボード入力	数字キー（上段/テンキー）	該当キーを押下	キーボード入力可否	未実装：結果表示に変化無し（ショートカット未対応）
	キーボード入力	小数点（.）	上段/テンキーの「.」押下	同上	未実装：変化無し
	キーボード入力	演算子（+,-,*,/）	上段/テンキーで押下	同上	未実装：式欄・結果欄とも変化無し
	キーボード入力	＝/Enter	Enter/テンキーEnter	同上	未実装：変化無し
	キーボード入力	Backspace/Delete	Backspace / Delete	同上	未実装：変化無し
	キーボード入力	Esc（C相当）	Esc 押下	同上	未実装：変化無し
	キーボード入力	F9（±相当）	F9 押下	同上	未実装：変化無し
	キーボード入力	Shift+5（%相当）	Shift+5	同上	未実装：変化無し
補足（判定の根拠：コードの該当点）

マウス入力：各ボタン Click ハンドラ（btnNum_Click / btnDot_Click / btnOperation_Click / btnEnter_Click / btnPercent_Click / btnClearEntry_Click / btnClear_Click / btnBack_Click / btnTogglesign_Click / btnTopMost_Click）で実装。

キーボード入力：KeyDown/KeyPress 等のハンドラ実装が存在しないため、仕様上は未対応。

CE/C/Backspace/±/%/＝/演算子 の詳細動作は、それぞれ OnClearEntryButton / ResetAllState / OnBackspaceButton / OnToggleSignButton / OnPercentButton / OnEqualsButton / OnOperatorButton と、その下位メソッド（PerformPendingCalculation, TryReplaceTrailingOperator, StartNewChainAfterEqual など）に準拠。


-------------------------------------------------------------------------------------------

ボタンのテスト項目（このコード準拠）
大項目	中項目	小項目	テスト手順	評価内容	期待結果
評価ポイント	—	—	各ボタンが入力された際の処理が正しいかテストを行う。	—	—
事前準備	—	—	アプリケーション起動直後の状態で開始する（結果欄「0」、式欄空）。	—	—
ボタン	%	単独％	①数字を入力しない ②% を押下	%ボタン入力時の処理	式欄「0」、結果欄「0」。以後の入力は通常通り継続できる。
	%	加算×％	①「A」入力 ②「+」 ③「b」入力 ④%	同上	式欄「A + (A×b/100)」、結果欄「A×b/100」。
	%	減算×％	①「A」 ②「-」 ③「b」 ④%	同上	式欄「A - (A×b/100)」、結果欄「A×b/100」。
	%	乗算×％	①「A」 ②「×」 ③「b」 ④%	同上	式欄「A × (b/100)」、結果欄「b/100」。
	%	除算×％	①「A」 ②「÷」 ③「b」 ④%	同上	式欄「A ÷ (b/100)」、結果欄「b/100」。
	%	=直後（加減算）	①「A + B =」 ②%	同上	結果欄「A×(A×0.01)」、式欄はその数を表示。%連打で直前係数（A×0.01）で繰り返し乗算。
	%	=直後（乗除算）	①「A × B =」（または÷）②%	同上	結果欄「A×0.01」または「A×0.01」相当（r×0.01）。%連打は係数連打なし。
	%	%→演算子	①「A + b %」まで実行 ②「×」	同上	%で置換済みの右辺を確定→結果表示、式欄は「(結果) ×」。
	%	1.2%後のドット	①「1.2」 ②% ③「.」	同上	結果欄「0.」が表示され、再度小数入力が可能。
	CE	右辺編集中	①「A」→「+」→「b」 ②CE	CE入力時	式欄「A +」、結果欄「0」。上書き入力状態。
	CE	=直後（演算子無）	①「A =」 ②CE	同上	式欄空、結果欄「0」。内部は初期化（ResetCalculationValues）。
	CE	%で置換直後	①「A + b %」 ②CE	同上	式欄「A +」に戻る、結果欄「0」。
	CE	negate単独表示時	①「100 =」 ②「±」 ③CE	同上	式欄空、結果欄「0」。右辺ロック解除。
	C	全消去	①任意の式を完成 ②C	C入力時	式欄空、結果欄「0」。フォントが既定値に戻り、エラーフラグ・各フラグ類が初期化される。
	←	1桁削除	①複数桁を入力 ②←	←入力時	末尾1桁が削除される。空や「-」になったら「0」に戻る。
	←	0のみ表示	①起動直後 ②←	同上	結果欄「0」のまま（削除されない）。
	←	「.」削除	①「.」押下 ②← ③再び「.」	同上	②で小数点が消え結果「0」。③で再び「0.」が入力できる。
	←	=直後	①「A+B=」 ②←	同上	式欄が空に、結果は「0」。以降は新規入力。
	←	指数表示中	①指数表示になる式を作成 ②←	同上	結果欄が「0」にリセット（指数表示は編集不可として初期化）。
	数字	複数入力	数字を連続入力	数字ボタンの処理	押下順で表示。整数部は3桁区切り。
	数字	先頭ゼロ	①「0」②再度「0」	同上	②は無視され表示は「0」のまま（小数点未入力時）。
	数字	=直後の数字	①「A+B=」②数字入力	同上	式欄は空のまま、結果欄に新しい数字が表示されチェーンを切る。
	数字	桁上限（整数）	16桁超まで入力を試す	同上	16桁を超える入力は無視。
	数字	桁上限（1以上の小数）	整数＋小数で16桁超まで入力	同上	総桁数が16を超える追加は無視。
	数字	桁上限（0.形式）	「0.」から17桁超まで入力	同上	18桁以上は入力不可（17桁まで表示）。
	数字	「.→0」	①「.」②「0」	同上	表示が欠けたり消えたりせずに「0.0…」と連続入力できる。
	±	単独	①「±」	±ボタンの処理	結果欄「0」のまま（0の符号反転は0）。
	±	入力中の反転	①数値入力 ②±	同上	結果欄の符号がトグル。式欄は変更なし。
	±	再反転	①上記の続きで ±	同上	再度トグルして元の符号に戻る。
	±	演算子後（右辺未入力）	①「A」→演算子 ②±	同上	式欄「A op negate(A)」、結果欄は「-A」。右辺自動生成・編集ロック。
	±	=直後	①「A op B =」②±	同上	結果が符号反転して表示、式欄は「negate(結果)」。続けて±で入れ子「negate(negate(結果))」。
	.	単独	①「.」	小数点の処理	結果欄が「0.」。
	.	連続押下	①「.」を連続押下	同上	2回目以降は無視（重複禁止）。
	演算子	初回（+）	①「+」	演算子の処理	式欄「0 +」、結果欄は0のまま。
	演算子	初回（-、×、÷）	①それぞれ押下	同上	式欄が「0 -」「0×」「0÷」。
	演算子	置換	①「10」→「+」→「×」→「÷」	同上	式欄末尾の演算子が最後に押したものへ置換。結果は左辺のまま。
	演算子	右辺未入力で変更	①「10」→「+」②「-」	同上	式欄「10 -」に更新、結果は「10」。
	演算子	計算して次の演算子	①「12」→「+」→「34」→「×」	同上	「12+34」を確定→結果表示→式欄「(結果) ×」。
	演算子	=直後に演算子	①「12+3=」②「×」	同上	式欄「15 ×」、結果欄15（新チェーン開始）。
	=	単独=	①「=」	=の処理	式欄「0 =」、結果欄は0（演算子未選択のため単独値扱い）。
	=	通常=	①「A」→「op」→「B」→「=」	同上	結果表示、式欄「A op B =」。
	=	連打=	①上記の続きで「=」を複数回	同上	直前の右辺Bを再利用して繰り返し計算。
	=	negate式での=	①「A」→「op」→（右辺が negate(A) になる手順）→「=」	同上	式欄は入れ子 negate(...) を維持したまま「＝」を付与。
	TopMost	固定ON/OFF	①「最前面」ボタン押下 ②再押下	TopMost表示	①フォームが最前面化しボタン色が薄い青（LightBlue）に、②で通常色へ戻る。
	エラー	0除算	①「1 ÷ 0 =」	エラー表示とボタン状態	結果欄「0で割ることはできません」（フォント18pt）。. ± % + − × ÷ の各ボタンが無効化。数字/C/CE/←/= は操作可能。
	エラー	0÷0	①「0 ÷ 0 =」	同上	結果欄「結果が定義されていません」。無効化の対象は上と同じ。
	エラー	オーバーフロー表示（文字列幅）	①非常に大きな演算で OverflowException を発生させる（例：コード上から例外を投げるテスト等）	エラー表示のフォント調整	結果欄に「計算範囲を超えました」。表示幅に合わせ自動でフォント縮小し最小14ptまで。
	エラー→復帰	数字で復帰	①上記いずれかのエラー発生 ②数字を押下	エラー復帰	内部リセット後、通常入力状態に戻り、無効化していたボタンが再度有効。
メモ（実装根拠）

% の演算ルール：OnPercentButton() 内の分岐（加減は A×(b/100)、乗除は b/100／＝直後の特例や連打係数）。

CE/C/←/±/=：それぞれ OnClearEntryButton / ResetAllState / OnBackspaceButton / OnToggleSignButton / OnEqualsButton と、その呼び出し先（PerformPendingCalculation, StartNewChainAfterEqual, TryReplaceTrailingOperator, ProcessEqualsLogic など）。

エラー処理：SetErrorState() と m_disabledButtonsOnError（無効化対象：., ±, %, +, -, ×, ÷）。0除算・未定義は Divide()、オーバーフローは例外捕捉。

フォント自動調整：結果欄 textResult_TextChanged → AutoFitResultFont()（最小 14pt、基準 36pt）。

TopMost 色替え：UpdateTopMostButtonColor()。


--------------------------------------------------------------------------------------------

エラー（表示・復帰）テスト項目（このコード準拠）
大項目	中項目	小項目	テスト手順	評価内容	期待結果
評価ポイント	—	—	エラーが発生した際の画面表示・無効化・復帰処理が適切かを確認する。	—	—
事前準備	—	—	アプリ起動直後の状態（結果欄「0」、式欄空）。	—	—
エラー	0除算（÷0）	=まで入力	①「1」②「÷」③「0」④「=」	エラー表示/無効化	結果欄に「0で割ることはできません」。式欄は「1 ÷」。. / ± / % / + / - / × / ÷（小数点・±・％・各演算子）が非アクティブ。数字/CE/C/←/= は操作可能。エラーフォントは18pt（表示幅に応じ自動縮小可、最小14pt）。
	0除算（÷0）	=直前に別演算子押下	①「1」②「÷」③「0」④（=は押さない）⑤「+」	同上	結果欄「0で割ることはできません」。式欄は「1 ÷ +」のように直前式＋押下演算子が見える（末尾は演算子）。非アクティブ対象は上と同じ。
	0÷0（未定義）	=まで入力	①「0」②「÷」③「0」④「=」	同上	結果欄「結果が定義されていません」。式欄は「0 ÷」。非アクティブ対象は同じ。
	オーバーフロー	極大計算	①「9999999999999999」②「×」③「9999999999999999」④「=」	同上	結果欄「計算範囲を超えました」。式欄は「9999999999999999 ×」。非アクティブ対象は同じ。
	指数表示幅→自動縮小	長いエラー文表示	上記いずれかでエラーを出す	エラーフォントの自動調整	エラー表示文字列が結果欄の幅に収まるよう自動縮小される（下限14pt）。
	エラー中の押下	無効ボタン確認	エラー表示中に次の各ボタンを押下：①「.」②「±」③「%」④「+」⑤「-」⑥「×」⑦「÷」	無効化の妥当性	①〜⑦はいずれもクリック/キー入力を受け付けない（見た目は灰色）。
	TopMost	影響なし	エラー表示中に「最前面」ボタンを押下	非対象ボタンの動作	ボタン色がトグルし、フォームの最前面固定が切替わる（エラー制御の影響を受けない）。
復帰	数字で復帰	数字押下	①いずれかのエラーを出す ②任意の数字ボタンを押下	復帰処理	内部リセットが走り通常状態へ復帰。式欄は空、結果欄は押下した数字から再入力開始。非アクティブだった. / ± / % / + / - / × / ÷が再びアクティブになる。
	CEで復帰	CE押下	①エラー表示中 ②「CE」	同上	式欄空、結果欄「0」。各ボタンが再びアクティブ。
	Cで復帰	C押下	①エラー表示中 ②「C」	同上	全状態初期化（フォントも既定値に戻る）。式欄空、結果欄「0」。
	←で復帰	Backspace押下	①エラー表示中 ②「←」	同上	式欄空、結果欄「0」（新規入力待ち）。
	=で復帰	=押下	①エラー表示中 ②「=」	同上	ボタンが再アクティブ化され、通常状態へ（式欄・結果欄は初期化相当）。
再発	復帰直後の演算	通常計算できるか	①上記いずれかの方法で復帰 ②「12」③「+」④「3」⑤「=」	正常系へ戻る	式欄「12 + 3 =」、結果欄「15」。
ガード	エラー→無効ボタン後→有効ボタン	操作順の確認	①エラー発生 ②無効ボタン（例「.」）を押す ③有効ボタン（例「数字」「CE」「C」「←」「=」）を押す	無効→復帰の流れ	②では何も起きない。③で復帰がかかり、その後は通常入力が可能になる。
表示	式欄の内容	0除算系	①「1 ÷ 0 =」の手順でエラー	式欄の表示妥当性	式欄は直前の左辺＋演算子（例「1 ÷」）で停止し、以後の復帰操作まで変化しない。
表示	フォント復帰	復帰後のフォント	①エラー発生→②数字/CE/C/←/= のいずれかで復帰	フォント状態確認	結果欄・途中式欄のフォントが既定サイズ（結果36pt/途中10ptの基準）へ戻る。
備考（コード根拠の要点）

エラーメッセージ：

0除算 →「0で割ることはできません」

0÷0 未定義 →「結果が定義されていません」

例外（桁あふれ想定）→「計算範囲を超えました」

エラー時に無効化するボタン：.（小数点）/ ± / % / + / - / × / ÷（m_disabledButtonsOnError）。
数字・CE・C・←・= は押下可能（= は押下時に復帰動作）。

フォント：エラー表示は18ptに設定後、表示幅超過時は自動縮小（最小14pt）。

復帰：数字・CE・C・←・= いずれも ShouldResetOnError() 経由でリセット → SetButtonsEnabled(true)。