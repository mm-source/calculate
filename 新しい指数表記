using System;
using System.Globalization;

namespace CalculatorApp
{
    /// <summary>
    /// Windows電卓に寄せた数値→文字列フォーマッタ
    /// ・有効桁：通常16桁、整数部が0の固定小数のみ17桁
    /// ・科学表記へ切替：|x| >= 1e16 または 0 < |x| < 1e-15
    /// ・科学表記は "e"、指数のゼロ埋め無し、末尾ゼロ除去、ただし小数点は残す（例: 2.e+17）
    /// </summary>
    internal static class WinCalcLikeFormatter
    {
        private const int MaxSigNormal = 16;                       // 通常の有効桁
        private const int MaxSigWhenIntZeroFixed = 17;             // 整数部0の固定小数のみ17桁
        private const decimal BigThreshold = 1_0000_0000_0000_0000m; // 1e16
        private const decimal SmallThreshold = 0.000000000000001m;   // 1e-15  ←ここが重要

        public static string Format(decimal value)
        {
            if (value == 0m) return "0";

            var abs = value < 0 ? -value : value;
            bool useSci = (abs >= BigThreshold) || (abs < SmallThreshold);

            return useSci ? FormatScientific(value) : FormatFixed(value);
        }

        // --- 科学表記（1 <= |mant| < 10 に正規化して16桁、末尾0削除。ただし '.' は残す） ---
        private static string FormatScientific(decimal value)
        {
            int exp = 0;
            decimal mant = value;
            decimal abs = mant < 0 ? -mant : mant;

            if (abs >= 10m)
            {
                while (abs >= 10m)
                {
                    mant /= 10m;
                    exp++;
                    abs /= 10m;
                }
            }
            else if (abs > 0m && abs < 1m)
            {
                while (abs < 1m)
                {
                    mant *= 10m;
                    exp--;
                    abs *= 10m;
                }
            }

            // 先頭1桁 + 小数部(最大15桁) = 有効16桁
            const int frac = MaxSigNormal - 1;
            mant = decimal.Round(mant, frac, MidpointRounding.AwayFromZero);

            // 丸めで 9.999... → 10.000... になった時の補正
            if (mant <= -10m || mant >= 10m)
            {
                mant /= 10m;
                exp++;
            }

            string mantRaw = mant.ToString("F" + frac, CultureInfo.InvariantCulture);
            mantRaw = TrimTrailingZerosButKeepDot(mantRaw);

            string e = exp >= 0 ? $"e+{exp}" : $"e{exp}";
            return mantRaw + e;
        }

        // --- 固定小数（整数部桁数に応じて小数桁を割当。整数部0の時のみ有効桁を17に拡張） ---
        private static string FormatFixed(decimal value)
        {
            decimal abs = value < 0 ? -value : value;

            // 整数桁数（"0.xxx" の時は 1 とする）
            int intDigits = 1;
            if (abs >= 1m)
            {
                decimal t = abs;
                intDigits = 0;
                while (t >= 1m)
                {
                    t /= 10m;
                    intDigits++;
                }
            }

            // ★整数部が 0 の固定小数は 17 桁、それ以外は 16 桁
            bool intIsZero = (intDigits == 1) && ((int)value == 0);
            int maxSig = intIsZero ? MaxSigWhenIntZeroFixed : MaxSigNormal;

            int frac = Math.Max(0, maxSig - intDigits);
            frac = Math.Min(frac, 28); // decimal の限界ガード

            decimal rounded = decimal.Round(value, frac, MidpointRounding.AwayFromZero);

            string s = rounded.ToString("F" + frac, CultureInfo.InvariantCulture);
            s = TrimTrailingZerosAndDot(s); // 固定小数は末尾'.'も消す
            return s;
        }

        // 科学表記：末尾0は削るが '.' は必ず残す（"2." を許容）
        private static string TrimTrailingZerosButKeepDot(string s)
        {
            if (!s.Contains(".")) return s + ".";
            int i = s.Length - 1;
            while (i >= 0 && s[i] == '0') i--;
            return s.Substring(0, i + 1); // 直前が '.' でもそのまま残る
        }

        // 固定小数：末尾0削除→末尾'.'も削除
        private static string TrimTrailingZerosAndDot(string s)
        {
            if (!s.Contains(".")) return s;
            int i = s.Length - 1;
            while (i >= 0 && s[i] == '0') i--;
            if (i >= 0 && s[i] == '.') i--;
            return s.Substring(0, Math.Max(0, i + 1));
        }
    }
}
