// 末尾 0 と末尾の小数点を除去
private static string TrimTrailingZerosAndDot(string s)
{
    if (string.IsNullOrEmpty(s)) return s;
    if (s.IndexOf('.') >= 0)
    {
        s = s.TrimEnd('0');
        if (s.EndsWith(".")) s = s.Substring(0, s.Length - 1);
    }
    if (s == "-0") s = "0";
    return s;
}

// 0. / -0. の直後から最初の非0までをスキップし、そこから先の“有効桁”を数える
private static int CountSignificantFractionDigitsForLeadingZeroDecimal(string raw)
{
    int start = raw.StartsWith("-0.") ? 3 : 2; // "0." / "-0." の後ろ
    int i = start;
    while (i < raw.Length && raw[i] == '0') i++; // 先行0を飛ばす
    // 以降の数字（0含む）を有効桁として数える（末尾0は別途丸めで落ちる想定）
    int count = 0;
    for (; i < raw.Length; i++)
    {
        char c = raw[i];
        if (c >= '0' && c <= '9') count++;
        else break; // 小数部は数字以外で打ち切り
    }
    return count;
}

private string FormatNumberForDisplay(decimal value)
{
    // まず最大精度近くで文字化（decimalは最大29桁）
    string raw = value.ToString("G29", CultureInfo.InvariantCulture);
    if (string.IsNullOrEmpty(raw)) return Constants.Numeric.ZERO_VALUE;

    // 既に指数なら正規化して返す
    if (raw.IndexOf('E') >= 0 || raw.IndexOf('e') >= 0)
        return NormalizeExponent(raw);

    bool minus = raw.StartsWith("-");
    string[] parts = raw.Split('.');
    string intPart = minus ? parts[0].Substring(1) : parts[0];

    // 整数部の有効桁数（先頭の0は除外）
    int intDigits = intPart.TrimStart('0').Length;
    if (intPart == "" || intDigits == 0) intDigits = 0;

    // 1) 整数部が16桁を超えたら指数表記
    if (intDigits > Constants.Numeric.MAX_INTEGER_DISPLAY_DIGITS)
        return value.ToString("e16", CultureInfo.InvariantCulture).ToLowerInvariant();

    // 2) 0. または -0. で始まる極小値の判定
    if (raw.StartsWith("0.") || raw.StartsWith("-0."))
    {
        int sig = CountSignificantFractionDigitsForLeadingZeroDecimal(raw);
        if (sig > Constants.Numeric.MAX_FRACTION_DISPLAY_DIGITS_LEADING_ZERO)
            return value.ToString("e16", CultureInfo.InvariantCulture).ToLowerInvariant();

        // 許容内なら通常表示。末尾の無意味な0/小数点だけ整える
        return TrimTrailingZerosAndDot(raw);
    }

    // 上記以外：通常数。末尾の無意味な0/小数点を整理
    return TrimTrailingZerosAndDot(raw);
}
