using System;
using System.Globalization;

namespace CalculatorApp
{
    internal static class WinCalcLikeFormatter
    {
        private const int MaxSig = 16;                          // 有効桁数
        private const decimal BigThreshold = 1_0000_0000_0000_0000m;   // 1e16
        private const decimal SmallThreshold = 0.0000000000000001m;    // 1e-16

        public static string Format(decimal value)
        {
            if (value == 0m) return "0";

            var abs = value < 0 ? -value : value;
            bool useSci = abs >= BigThreshold || abs < SmallThreshold;

            return useSci ? FormatScientific(value) : FormatFixed(value);
        }

        private static string FormatScientific(decimal value)
        {
            int exp = 0;
            decimal mant = value;
            decimal abs = mant < 0 ? -mant : mant;

            if (abs >= 10m)
            {
                while (abs >= 10m)
                {
                    mant /= 10m;
                    exp++;
                    abs /= 10m;
                }
            }
            else if (abs > 0m && abs < 1m)
            {
                while (abs < 1m)
                {
                    mant *= 10m;
                    exp--;
                    abs *= 10m;
                }
            }

            int frac = Math.Max(0, MaxSig - 1);
            mant = decimal.Round(mant, frac, MidpointRounding.AwayFromZero);

            if (mant <= -10m || mant >= 10m)
            {
                mant /= 10m;
                exp++;
            }

            string mantRaw = mant.ToString("F" + frac, CultureInfo.InvariantCulture);
            mantRaw = TrimTrailingZerosButKeepDot(mantRaw);

            string e = exp >= 0 ? $"e+{exp}" : $"e{exp}";

            return mantRaw + e;
        }

        private static string FormatFixed(decimal value)
        {
            decimal abs = value < 0 ? -value : value;

            int intDigits = 1;
            if (abs >= 1m)
            {
                decimal t = abs;
                intDigits = 0;
                while (t >= 1m)
                {
                    t /= 10m;
                    intDigits++;
                }
            }

            int frac = Math.Max(0, MaxSig - intDigits);
            frac = Math.Min(frac, 28);

            decimal rounded = decimal.Round(value, frac, MidpointRounding.AwayFromZero);

            string s = rounded.ToString("F" + frac, CultureInfo.InvariantCulture);
            s = TrimTrailingZerosAndDot(s);
            return s;
        }

        private static string TrimTrailingZerosButKeepDot(string s)
        {
            if (!s.Contains(".")) return s + ".";

            int i = s.Length - 1;
            while (i >= 0 && s[i] == '0') i--;
            return s.Substring(0, i + 1);
        }

        private static string TrimTrailingZerosAndDot(string s)
        {
            if (!s.Contains(".")) return s;
            int i = s.Length - 1;
            while (i >= 0 && s[i] == '0') i--;
            if (i >= 0 && s[i] == '.') i--;
            return s.Substring(0, Math.Max(0, i + 1));
        }
    }
}


private void DisplayNumber(decimal value, bool overwrite = false)
{
    string text = WinCalcLikeFormatter.Format(value); // ←ここで整形
    textResult.Text = text;

    DisplayValue = value;
    TextOverwrite = overwrite;



}
