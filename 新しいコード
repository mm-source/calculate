using System;
using System.Globalization;

internal static class WinCalcLikeFormatter
{
    private const int MaxSig = 16;                          // 有効桁最大
    private const decimal BigThreshold = 1_0000_0000_0000_0000m;   // 1e16
    private const decimal SmallThreshold = 0.0000000000000001m;    // 1e-16

    public static string Format(decimal value)
    {
        if (value == 0m) return "0";

        var abs = value < 0 ? -value : value;
        bool useSci = abs >= BigThreshold || abs < SmallThreshold;

        return useSci ? FormatScientific(value) : FormatFixed(value);
    }

    // --- 科学表記（Windows電卓風） ---
    private static string FormatScientific(decimal value)
    {
        int exp = 0;
        decimal mant = value;

        // 正規化: 1 <= |mant| < 10 になるまでスケーリング
        decimal abs = mant < 0 ? -mant : mant;
        if (abs >= 10m)
        {
            while (abs >= 10m)
            {
                mant /= 10m;
                exp++;
                abs /= 10m;
            }
        }
        else if (abs > 0m && abs < 1m)
        {
            while (abs < 1m)
            {
                mant *= 10m;
                exp--;
                abs *= 10m;
            }
        }

        // 有効桁16に丸め（小数部は MaxSig-1 桁）
        int frac = Math.Max(0, MaxSig - 1);
        mant = decimal.Round(mant, frac, MidpointRounding.AwayFromZero);

        // 丸めで 9.999... -> 10.000 になった場合の補正
        if (mant <= -10m || mant >= 10m)
        {
            mant /= 10m;
            exp++;
        }

        // 小数末尾0を削る。ただし '.' は最低1つ残す（"2.e+17" を実現）
        string mantRaw = mant.ToString("F" + frac, CultureInfo.InvariantCulture);
        mantRaw = TrimTrailingZerosButKeepDot(mantRaw);

        // 指数部は 'e±N'（先頭0は付けない）
        string e = exp >= 0 ? $"e+{exp}" : $"e{exp}";

        return mantRaw + e;
    }

    // --- 固定小数（Windows電卓風） ---
    private static string FormatFixed(decimal value)
    {
        decimal abs = value < 0 ? -value : value;

        // 整数桁数を数える（decimal を 10 で割りながら）
        int intDigits = 1;
        if (abs >= 1m)
        {
            decimal t = abs;
            intDigits = 0;
            while (t >= 1m)
            {
                t /= 10m;
                intDigits++;
            }
        }

        // 有効桁16に収まるよう小数桁数を決定
        int frac = Math.Max(0, MaxSig - intDigits);
        frac = Math.Min(frac, 28); // decimal の最大小数桁に合わせてガード

        decimal rounded = decimal.Round(value, frac, MidpointRounding.AwayFromZero);

        // 文字列化して末尾0と末尾'.'は削る（固定小数は '.' も消してよい）
        string s = rounded.ToString("F" + frac, CultureInfo.InvariantCulture);
        s = TrimTrailingZerosAndDot(s);
        return s;
    }

    private static string TrimTrailingZerosButKeepDot(string s)
    {
        if (!s.Contains(".")) return s + "."; // 小数点が無ければ付ける（"2."にするため）

        int i = s.Length - 1;
        while (i >= 0 && s[i] == '0') i--;
        // 直前が '.' ならそのまま（= ドットを残す）
        return s.Substring(0, i + 1);
    }

    private static string TrimTrailingZerosAndDot(string s)
    {
        if (!s.Contains(".")) return s;
        int i = s.Length - 1;
        while (i >= 0 && s[i] == '0') i--;
        if (i >= 0 && s[i] == '.') i--; // 固定小数はドットも消す
        return s.Substring(0, Math.Max(0, i + 1));
    }
}
